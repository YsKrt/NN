var wndMain: wnd@Wnd
var drawMain: wnd@Draw
+const WIDTH: float :: 1600.0
+const HEIGHT: float :: 900.0
func main()
	;Activation
	;0 sigmoid
	;1 ReLU
	;2 tanh
	;3 step
	var result: []char
	do result :: wndex@inputBox(null, "隠れ層の数,活性化関数1,〃2,学習率", "Neural Network", "1,0,0,1.0e-3", null)
	if(result =& null)
		ret
	end if
	
	do @wndMain :: wnd@makeWnd(null, %aspect, @WIDTH $ int, @HEIGHT $ int, "Title")
	do @drawMain :: wnd@makeDraw(@wndMain, 0, 0, @WIDTH $ int, @HEIGHT $ int, %scale, %scale, false)
	
	var data: [][]char :: result.split(",")
	var existed: bool
	var hiddenNum: int :: data[0].toInt(&existed)
	var activate1: int :: data[1].toInt(&existed)
	var activate2: int :: data[2].toInt(&existed)
	var learningRate: float :: data[3].toFloat(&existed)
	var nn: \nn@NN :: #\nn@NN
	do nn.activate1 :: activate1
	do nn.activate2 :: activate2
	do nn.learningRate :: learningRate
	do nn.hiddenNum :: hiddenNum
	do nn.main()
	
end func
